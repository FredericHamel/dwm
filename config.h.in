/* See LICENSE file for copyright and license details. */
// File feed into mesonbuild.

// Version
#define VERSION "@version@"
#define TAGS @tags@

#mesondefine USE_TERMINAL
#mesondefine USE_LOCKSCREEN
#mesondefine USE_EXPLORER
#mesondefine USE_SCROT

/* appearance */
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int swallowfloating    = 0;        /* 1 means swallow floating window */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const int showsystray       = 1;     /* False means no systray */
static const int showbar           = 1;     /* False means no bar */
static const int topbar            = 1;     /* False means bottom bar */
static const char *fonts[]         = { "monospace:size=14", "JoyPixels:pixelsize=10:antialias=true:autohint=true" };
static const char dmenufont[]     = "monospace:size=14";
static const char prompt[]          = "Run: ";
static const char dmenu_lines[]     = "5";
static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#005577";
static const char *colors[][3]      = {
  /*               fg         bg         border   */
  [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
  [SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
};


/* tagging */
static const char *tags[] = TAGS;

static const Rule rules[] = {
  /* xprop(1):
   *  WM_CLASS(STRING) = instance, class
   *  WM_NAME(STRING)  = title
   */
  /* class      instance    title           tags mask     isfloating  isterminal  noswallow  monitor */
  { "Gimp",     NULL,       NULL,           0,            True,        False,      0,        -1 },
  { "firefox",  NULL,       NULL,           1 << 8,       False,       False,     -1,        -1 },
  { "St",       NULL,       NULL,           0,            False,       True,       1,        -1 },
  { NULL,       NULL,       "Event Tester", 0,            False,       True,       1,        -1 }, /* xev */
};

/* layout(s) */
static const int default_layout = 2; /* default layout index */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

static const int dirs[3]      = { DirHor, DirVer, DirVer }; /* tiling dirs */
static const float facts[3]   = { 1.1,    1.1,    1.1 };    /* tiling facts */

static const Layout layouts[] = {
    /* symbol     arrange function */
    { "<||",      tile },    /* first entry is default */
    { "HHH",      grid },
    { "[M]",      monocle },
    { "><>",      NULL },    /* no layout function means floating behavior */
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} }
#define TILEKEYS(MOD,G,M,S) \
{ MOD, XK_r, setdirs,  {.v = (int[])  { INC(G * +1),   INC(M * +1),   INC(S * +1) } } }, \
{ MOD, XK_h, setfacts, {.v = (float[]){ INC(G * -0.1), INC(M * -0.1), INC(S * -0.1) } } }, \
{ MOD, XK_l, setfacts, {.v = (float[]){ INC(G * +0.1), INC(M * +0.1), INC(S * +0.1) } } }

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *dmenucmd[] = { "dmenu_run", "-l", dmenu_lines, "-p", prompt, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };

#ifdef USE_TERMINAL
static const char *termcmd[]  = { USE_TERMINAL, NULL };
#endif

#ifdef USE_EXPLORER
static const char *explorer[] = { "dbus-launch", "pcmanfm", NULL };
#endif

#ifdef USE_LOCKSCREEN
static const char *lock[]    = { USE_LOCKSCREEN, NULL };
#endif

#ifdef USE_SCROT
static const char *scrot[]   = {"/bin/sh", "-c", "scrot ~/screenshots/%Y-%m-%d-%T-screenshot.png", NULL};
#endif

static Key keys[] = {
    /* modifier                     key        function        argument */
    { MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
#ifdef USE_TERMINAL
    { MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
#endif
#ifdef USE_EXPLORER
    { MODKEY,                       XK_e,      spawn,          {.v = explorer } },
#endif
#ifdef USE_LOCKSCREEN
    { MODKEY,                       XK_o,      spawn,          {.v = lock }  },
#endif

#ifdef USE_SCROT
    { MODKEY,                       XK_F12,    spawn,          {.v = scrot} },
#endif
    { MODKEY,                       XK_b,      togglebar,      {0} },
    { MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
    { MODKEY|ShiftMask,             XK_j,      movestack,      {.i = +1 } },
    { MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
    { MODKEY|ShiftMask,             XK_k,      movestack,      {.i = -1 } },
    { MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
    { MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
    { MODKEY|ShiftMask,             XK_Return, zoom,           {0} },
    { MODKEY,                       XK_Tab,    view,           {0} },
    { MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
    { MODKEY|ShiftMask,             XK_f,      togglefullscreen, {0}},
    { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
    { MODKEY,                       XK_g,      setlayout,      {.v = &layouts[1]} },
    { MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
    { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[3]} },
    { MODKEY,                       XK_space,  setlayout,      {0} },
    TILEKEYS(MODKEY,                                           1, 0, 0),
    TILEKEYS(MODKEY|ShiftMask,                                 0, 1, 0),
    TILEKEYS(MODKEY|ControlMask,                               0, 0, 1),
    TILEKEYS(MODKEY|ShiftMask|ControlMask,                     1, 1, 1),
    { MODKEY|ShiftMask,             XK_t,      setdirs,        {.v = (int[]){ DirHor, DirVer, DirVer } } },
    { MODKEY|ControlMask,           XK_t,      setdirs,        {.v = (int[]){ DirVer, DirHor, DirHor } } },
    { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
    { MODKEY,                       XK_0,      view,           {.ui = ~0 } },
    { MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
    { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
    { MODKEY,                       XK_period, focusmon,       {.i = +1 } },
    { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
    { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
    TAGKEYS(                        XK_1,                      0),
    TAGKEYS(                        XK_2,                      1),
    TAGKEYS(                        XK_3,                      2),
    TAGKEYS(                        XK_4,                      3),
    TAGKEYS(                        XK_5,                      4),
    TAGKEYS(                        XK_6,                      5),
    TAGKEYS(                        XK_7,                      6),
    TAGKEYS(                        XK_8,                      7),
    TAGKEYS(                        XK_9,                      8),
    { MODKEY|ControlMask,           XK_q,      restart,        {0} },
    { MODKEY|ShiftMask,             XK_q,      quit,           {0} }
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
    /* click                event mask      button          function        argument */
    { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
    { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
    { ClkWinTitle,          0,              Button2,        zoom,           {0} },
#ifdef USE_TERMINAL
    { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
#endif
    { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
    { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
    { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
    { ClkTagBar,            0,              Button1,        view,           {0} },
    { ClkTagBar,            0,              Button3,        toggleview,     {0} },
    { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
    { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} }
};

